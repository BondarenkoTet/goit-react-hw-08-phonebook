{"version":3,"file":"static/js/647.ec513aee.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","redux/selectors.js","components/Form/Form.jsx","webpack://react-homework-template/./src/components/Contact/ContactsList.module.css?23cd","components/Contact/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"btn\":\"Form_btn__0ebGo\"};","\nexport const selectContacts = state => state.contacts.items;\nexport const selectLoader = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = state => {\n    const contacts = selectContacts(state);\n    const filterValue = selectFilter(state);\n    const filteredContacts = contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filterValue));\n    \n    return filteredContacts;\n}\n    ","import { nanoid } from 'nanoid';\nimport css from '../Form/Form.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createContacts} from \"redux/operation\";\nimport {selectContacts} from \"redux/selectors\"\nimport { useState } from \"react\";\n\nconst Form = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n            return alert(`${name} is already in contacts.`);\n        } else if (contacts.find(contact => contact.number.toLowerCase() === number.toLowerCase())) {\n            return alert(`This number is already in contacts.`);\n        }\n\n        const newContact = {\n            id: nanoid(),\n            name,\n            number\n        };\n\n        dispatch(createContacts(newContact));\n        reset();\n    };\n\n    const reset = () => {\n        setName('')\n        setNumber('')\n    };\n\n    const handleChange = e => {\n        if (e.target.name === 'name') {\n            setName(e.target.value);\n        }\n        if (e.target.name === 'number') {\n            setNumber(e.target.value);\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={css.form}>\n            <label className={css.label}>\n                Name\n            <input\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                className={css.input}\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                onChange={handleChange}\n            />\n            </label>\n            <label>\n                Number\n            <input\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                className={css.input}\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                onChange={handleChange}\n            />\n            </label>\n            <button type=\"submit\" \n                className={css.btn}>Add contact</button> \n                \n        </form>\n        \n    );\n    }\n         \n    export default Form;\n\n\n    // const [name, setName] = useState('');\n    // const [number, setNumber] = useState('');\n\n    // const handleSubmit = e => {\n    // e.preventDefault();\n    \n    // if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n    //     alert (\"This contact is already in your phonebook\")\n    // } else if (contacts.find(contact => contact.number === number)) {\n    //     return alert(`This number is already in contacts.`);\n    // }\n    //     const newContact = {\n    //         id: nanoid(),\n    //         name,\n    //         number\n    //     };\n    //     dispatch(getContacts(newContact));\n    //     reset();\n    // };\n    // const reset = () => {\n    //     setName('')\n    //     setNumber('')\n    // };\n    \n    //  const handleChange = e => {\n    //     if (e.target.name === 'name') {\n    //         setName(e.target.value);\n    //     }\n    //     if (e.target.name === 'number') {\n    //         setNumber(e.target.value);\n    //     }\n    // };\n\n        \n        ","// extracted by mini-css-extract-plugin\nexport default {\"span-name\":\"ContactsList_span-name__shhjA\",\"span-number\":\"ContactsList_span-number__Z1O9l\",\"delete-btn\":\"ContactsList_delete-btn__H1Imt\"};","\nimport { selectFilteredContacts } from \"redux/selectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport css from \"./ContactsList.module.css\"\nimport { deleteContacts} from \"redux/operation\"\n\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const availableContacts = useSelector(selectFilteredContacts);\n\n    const handleDelete = id => dispatch(deleteContacts(id));\n\n    return availableContacts.length > 0 ? (\n        <>\n        {availableContacts.map(contact => (\n            <li key={contact.id}>\n                <span  className={css[\"span-name\"]}>{contact.name}:</span>\n                <span  className={css[\"span-number\"]}>{contact.number}</span> \n                <button \n                    type=\"button\"\n                    className={css[\"delete-btn\"]}\n                    onClick={() => handleDelete(contact.id)}\n                    id={contact.id}\n                >Delete\n                </button>\n            </li>\n        ))}\n        </>\n    ) : (<p>No contacts</p>)    \n}\nexport default ContactList;   \n\n    ","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import React from \"react\";\nimport { useDispatch} from \"react-redux\";\nimport {filteredContacts} from \"redux/filterSlice\"\nimport css from \"./Filter.module.css\"\n\nconst Filter = () =>{\n    const dispatch = useDispatch();\n\n    const onFilterChange = e => {\n        dispatch(filteredContacts(e.target.value));\n    };\n    \n    return (\n    <label className={css.label}>Find contacts by name\n        <input className={css.input}\n            id=\"contacts-filter\"\n            type=\"text\"\n            name=\"filter\"\n            onChange={onFilterChange}\n        />\n    </label>\n    \n    )\n}\n\nexport default Filter;\n","import Form from \"../components/Form/Form\";\nimport ContactList  from \"../components/Contact/ContactList\";\nimport Filter from \"../components/Filter/Filter\";\nimport { useSelector, useDispatch} from \"react-redux\";\nimport { selectLoader, selectError, selectContacts} from \"redux/selectors\"\nimport { useEffect } from \"react\";\nimport { getContacts } from \"redux/operation\";\n\n\nconst Contacts = ()=> {\n    const dispatch = useDispatch();\n\n    const isLoading =useSelector(selectLoader);\n    const error=useSelector(selectError)\n    const contacts =useSelector(selectContacts)\n\n\nuseEffect(() => {\n    dispatch(getContacts());\n}, [dispatch]);\n\nreturn (\n    <>\n    <h1>Phonebook</h1>\n        <Form />\n        <Filter/> \n        {isLoading && <p>Loading ...</p>}\n    <h2>Contacts</h2> \n        {error && <p>{error}</p>}\n        {contacts.length > 0 &&  <ContactList /> } \n\n    </>\n)\n}\nexport default Contacts;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectLoader","isLoading","selectError","error","selectFilteredContacts","filterValue","filter","selectFilter","contact","name","toLowerCase","includes","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","reset","handleChange","e","target","value","onSubmit","preventDefault","find","alert","newContact","createContacts","className","css","type","title","required","onChange","availableContacts","length","map","onClick","deleteContacts","filteredContacts","useEffect","getContacts"],"sourceRoot":""}